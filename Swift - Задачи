// 1 поток
//Задача 1 - Даны 2 целых числа в качестве аргументов функции. Сложить остатки от деления этих аргументов на 5 и вернуть результат
import UIKit

func twoIntegers (arg1: Double , arg2: Double ) -> Double  {
    let result1 = arg1 / 5
    let result2 = arg2 / 5

    return result1 + result2
}
twoIntegers(arg1: 20, arg2: 15)


// Задача 2 -Даны 2 числа на вход функции.
// Первое - количество проголосовавших за патриотического кандидата ( Int ), второе - результат на выборах его в процентах (Double) ( сколько процентов от пришедших за него отдало голос ).
// Определить, сколько человек проголосовало на выборах.
 import UIKit

func golos(arg1: Int , arg2: Double) -> Int {
    let r = Double(arg1) / arg2
    let z = r * 100
    return Int(z)
}
golos(arg1: 88, arg2: 13)

// Задача 3 - Функция принимает на вход 3 аргумента - часы, минуты, секунды ( все Int ). Вернуть число секунд
import UIKit

func time(hours: Int, minute: Int, seconds: Int) -> Int {
    let Interval1 = hours * 60 * 60
    let Interval2 = minute * 60
    let Interval3 = seconds
    return Interval1 + Interval2 + Interval3
}
Time(hours: 1, minute: 50, seconds: 2)

// Задача 4 - Написать 2 функции. Обе принимают на вход 2 аргумента - длина и ширина прямоугольника.
//Но первая возвращает его периметр, вторая - площадь. Все в целых числах ( Int )

import UIKit

func decision(length: Int , width: Int) -> Int {
    let perimetr = (length + width) * 2
    return perimetr
}
Decision(length: 20, width: 10)

func square(legth: Int, width: Int) -> Int {
    let s = legth * width
    return s
}
square(legth: 20, width: 10)


// Задача 5 - Функция принимает на вход 2 аргумента. Первый - объем бутылки ( в долях от литра - 0.5, 0.7 и т д ),
//второй - крепость напитка ( десятичная дробь, все аргументы - Double). Вычислить количество выпитого чистого спирта в граммах ( миллилитры)
import UIKit

func V(volume: Float, fortress: Double) -> Float {
    let decision1 = Volume * 1000
    let decision2 = Decision1 / 100 * 95

    return decision2

}
V(Volume: 0.5, Fortress: 95)

// Задача 6 - Есть уравнение x2 + 3x-44 = 0 Написать функцию, печатающую оба корня квадратного уравнения.Тут надо загуглить дискриминант и как корни уравнения вычислять. Используйте функцию sqrt() для вычисления квадратного корня.
//Коэффициенты квадратного уравнения ( множители перед x2, x и свободный член -44) передавайте в качестве аргументов в функцию.
import Foundation
import UIKit

func discriminant(number1: Double , number2: Double , number3: Double) -> [Double] {
    let discr = 2 * number2 - 4 * number1 * number3
    var koren1 = 0.0
    var koren2 = 0.0
        if discr >= 0 {
        koren1 = (-number2 + sqrt(discr)) / (2 * number1)
        koren2 = (-number2 - sqrt(discr)) / (2 * number1)
}
    return [koren1, koren2]
}
print(discriminant(number1: 2 , number2: 3 , number3: -44))

// Задача 7 - Написать функцию, принимающую в качестве аргументов длину катетов прямоугольного треугольника. Функция должна нарисовать в консоли треугольник из звёздоздочек
import UIKit

var rectangle: Int = 5
for i in stride(from: rectangle, through: 0, by: -1) {
    for _ in i...rectangle{
        print("*",terminator: "")
    }
    print("")
}

//
// Задача 8 - Написать функцию, вычисляющую длину окружности. Радиус на вход в качестве аргумента ( Double ).
//На выходе - длина окружности. Число пи так писать Double.pi .
import UIKit

func radius(r:Double) -> Double {
    let f = 2 * r * 3.14
    return f
}

// Задача 9 - Написать функцию, принимающую на вход аргумент - длина стороны квадрата. Найти радиус вписанной окружности ( радиус вписанной в квадрат окружности - половина его стороны - нарисуйте и проверьте на бумажке) и вызвать функцию из п.8.
//Результат длины окружности вернуть из функции.
import UIKit

func radius(r:Double) -> Double {
    let f = 2 * r * 3.14
    return f
}
//Задача 10 - Написать функцию, определяющую площадь круга по его радиусу ( то же, что в п.8, но площадь - загуглите формулу )
import UIKit

func s(radius: Double) -> Double {
    3.14 * pow(radius, 2)

}
// Задача 11 - Написать функцию, принимающую на вход объём бутылки, крепость напитка и количество бутылок, выпитых на вечеринке. Используя функцию из п. 4 определить суммарный объем выпитого.
//( функцию из п.4 обязательно нужно вызвать)
import UIKit

func v(volume: Float, fortress: Double) -> Float {
    let decision1 = volume * 1000
    let decision2 = decision1 / 100 * 95

    return decision2

}
func party(volume:Float, krepost: Double , kolichestvo: Float) -> Float {
   let k = v(volume:volume , fortress: krepost)
    return Float(kolichestvo) * K
}

// Задача 12 - И функцию, по стороне квадрата вычисляющую площадь вписанного круга ( аналогично п. 9 )
import UIKit

func s(dlina: Double) -> Double {
    let r = dlina / 2
    let p = 3.14 * pow(r, 2)
    return p
}
s(dlina: 10)



// Задача 13 - Используем встроенную sqrt(). Написать функцию, по двум катетам прямоугольного треугольника возвращающую гипотенузу
import UIKit

func treugolnik(cathet1: Double, cathet2: Double) -> Double{
    let gipotenuza = sqrt(cathet1 * cathet1 + cathet2 * cathet2)
    return gipotenuza
}
treugolnik(cathet1: 5, cathet2: 7)



 // 2 поток

//Задача 1 - Написать функцию с 2 целочисленными аргументы. Вернуть true, если первое делится без остатка на второе и false иначе
func numbers(number1: Int , number2: Int) -> Bool {
    if number1.truncatingRemainder(dividingBy: number2) == 0 {
        return true
    }
}

//Задача 2 - Написать функцию с 2 целочисленными аргументами. Вернуть наименьшее число из функции
func numbers(number1: Int , number2: Int) -> Int {
    if number1 < number2 {
        return number1
    } else {
        return number2
    }
}
//Задача 3 - Написать функцию с 2 целочисленными аргументами. Вернуть нечётный аргумент
import UIKit

func arguments(number1: Int , number2: Int) -> Int {
    if number1 % 2 != 0 {
        return number1
    } else if number2 % 2 != 0{
       return number2
    }
}

//Задача 4 - Написать функцию с 3 целочисленными аргументами. Вернуть наибольший аргумент
import UIKit

func arguments(number1: Int , number2: Int , number3: Int) -> Int {
    if number1 > number2 && number1 > number3 {
        return number1
    }
    if number2 > number1 && number2 > number3 {
        return Number2
    }
    if number3 > number1 && number3 > number2 {
        return number3
    }
    return 0
}
Arguments(number1: 10, number2: 5, number3: 3)
//Зачада 5 - На вход функции 3 числа - стороны требудеугольника. Во-первых, используя функцию существования треугольника, определить, существует ли он. Если существует - определить, какой он - равносторонний, равнобедренный или прост треугольник. Если он не существует из функции вернуть строчку “не существует”. А если да - один из типов “равносторонний”, “равнобедренный”, “прост треугольник”

import UIKit

func triangle(number1:Int , number2: Int , number3: Int) -> Bool {
    if number1 + number2 > number3 {
        return true
    } else if number2 + number3 > number1 {
        return true
    } else if number3 + number1 > number2 {
        return true
    } else {
    return false
    }
}
func isosceles(number1:Int , number2: Int , number3: Int) -> String {
    var str = ""
    if !triangle(number1:number1,number2:number2,number3:number3) {
        str = "Не существует"
    } else if number1 == number2  {
           str = "Треугольник Равнобедренный"
    } else if number1 == number2 && number1 == number3 {
           str = "Треугольник Равносторонний"
    } else {
        str = "Пусто"
    }
    return str
    }
print(isosceles(number1: 5, number2: 5, number3: 2))
//Задача 6 - Написать функцию по её математическому описанию:
//y = f(x), где y = 2x -10, если x > 0, y = 0, если x == 0, y = x*x - 4x +14, если x < 0
import UIKit

func f(x:Decimal){
    if x > 0 {
        print(2*x-10)
    } else if x == 0 {
        print(0)
    }
    print(pow(x, 2) - 4*x + 14)
}
// Задача 7 - На вход функции 2 целочисленных аргумента. Определить, к какой координатной четверти относится эта точка
func quadrant(x: Int, y: Int) -> String {
    if x > 0 && y > 0 {
        return("1 четверть")
    } else if x<0 && y>0 {
        return("2 четверть")
    } else if x < 0 && y < 0 {
        return("3 четверть")
    } else {
        return("4 четверть")
    }
}
// Задача 8 - На вход функции 1 целочисленный аргумент. Напечатать в консоль все НЕЧЕТНЫЕ числа, не превосходящие это число
import UIKit

func even(number1: Int){
    var t = 1
    while t <= number1 {
        print(t,terminator: ",")
        t = t+1
    }
}
even(number1: 98)
// 9 задача - На вход функции 2 целочисленных аргумента. Напечатать квадраты чисел, находящиеся между 1 и 2 аргументом. ( внимание! 1 аргумент должен быть больше 2-го )
func numbers(number1: Int, number2:Int) {
    if number1 < number2 {
        print("number1 < number2")
    } else {
        for i in number2+1...number1-1{
            print(i*i)
        }
    }
}
numbers(number1: 15, number2: 2)

// 10 задача - Факториал - произведение всех чисел от 1 до данного числа. Факториал обозначается символом “!” в математике. Так, 5! = 1*2*3*4*5 = 120. Написать функцию, которая в цикле вычисляет факториал входного аргумента.
func factorial(number1: Int) -> Void {
    var result = 1
    for i in 1...number1 {
         result *= i
    }
    print (result)
}
factorial(number1: 4)

// 11 задача - В сбер принесли X рублей на Y лет, годовых N процентов. С помощью цикла определить, сколько денег получит клиент через Y лет. X, Y, N - аргументы функции
func money(y:Float , x: Float , n: Int) -> Void {
    var t = x
    for i in 1...n {
        t = t + t * (y/100)
    }
    print(t)
}
money(y: 100, x: 12, n: 7)

// 12 задача - На вход функции массив целых чисел. Вернуть из функции новый массив нечетных чисел, входящих в массив из аргумента.
func array(number: [Int]) -> [Int] {
    var abc: [Int] = []
    for i in 0...number.count-1 {
        if number[i] % 2 != 0{
            abc.append(number[i])
        }
    }
    return abc
}
array(number: [1,2,3,4,5])

// 13 задача -
func func1(array: [Int]) -> Int {
    var t: Int = array[0]
    for i in array {
        if i >= t {
            t = i
        }
    }
    return t
}

func1(array: [1,5,7,10,-5])

func func2(array: [Int]) -> Int {
    var t: Int = array[0]
    for i in array {
        if i <= t {
            t = i
        }
    }
    return t
}

func2(array: [1,5,7,10,-5])


// 14 задача - Написать функцию, печатающую только двузначные числа из массива ( массив в аргументе )
func even(number1: Int){
    var t = 10
    while t <= number1 {
        print(t,terminator: ",")
        t = t+2
    }
}
even(number1: 100)
// Задача 15 - На вход функции - 2 числа. Вернуть true,  если только первое из них - чётное, а второе - кратно 7
func numbers(number1:Int , number2: Int) -> Bool {
    if number1 % 2 == 0 && number2 % 7 == 0 {
        return true
    } else {
        return false
    }
}
numbers(number1: 14, number2: 7)

//Задача 16 - На вход функции - 2 числа. Вернуть true, если оба числа чётные и кратны 78
func numbers(number1: Int , number2: Int) -> Bool {
    if number1 % 2 == 0 && number2 % 78 == 0{
        return true
    } else {
        return false
    }
}
numbers(number1: 156, number2: 78 )

//Задача 17 -
func months(months1:Int) -> Void {
    var m : [String] = ["January" , "February" , "March" , "April" , "May" , "June" , "July" , "August" , "September" , "October" , "November" , "December" ]
    if months1 == 1 {
        print(m[0])
    } else if months1 == 2 {
        print(m[1])
    } else if months1 == 3 {
        print(m[2])
    } else if months1 == 4 {
        print(m[3])
    } else if months1 == 5 {
        print(m[4])
    } else if months1 == 6 {
        print(m[5])
    } else if months1 == 7 {
        print(m[6])
    } else if months1 == 8 {
        print(m[7])
    } else if months1 == 9 {
        print(m[8])
    } else if months1 == 10 {
        print(m[9])
    } else if months1 == 11  {
        print(m[10])
    } else if months1 == 12 {
        print(m[11])
    }
}
months(months1: 1)

//Задача 18 = Написать функцию, возвращающую массив всех четных чисел, не превосходящих входной целочисленный аргумент
func array(number1 : Int) -> [Int] {// пишу функцию где присваиваю аргументу 1 значение инт и возвращаю целочисленный массив
    // называю переменную и присваиваю пустой массив
    var array1: [Int] = []
    // делаю цикл в диапазоне от 0 до аргумента, но не включая аргумент.Все числа будут меньше самого аргумента
    for i in 0..<number1 {
        // в теле цикла делаем условие , что если i(константу) делим на 2 без остатка == - это без остатка
        if i % 2 == 0 {
            // здесь я применяю свойство которое добавляет i - константу
            array1.append(i)
        }
    }
    return array1
}
array(number1: 10)




//Задача 19 = Написать функцию, печатающую в консоль элементы входного массива: двузначные и кратные 3
func array(number1: [Int]) -> Void { // пишу функцию где присваиваю аргументу 1 значение инт и не возвращаю ничего
    // называю переменную и присваиваю пустой массив
   var array1: [Int] = []
    // делаю цикл в котором я перебираю i внутри массива (все значения массива)
    for i in number1 {
        // условие в котором константу i делю на 3 и прописываю второе условие в котором указываю что i должно быть больше либо равно 10
        if i % 3 == 0 && i >= 10 && i <= 99 {
            print(i)
        }
   }
}
array(number1: [3,15,40,21])



//Задача 20 - На вход функции 1 аргумент - целое положительное число. Найти сумму всех нечетных чисел, меньше этого числа
func array(number1: Int) -> Int { // пишу функцию в которой указываю целочисленный аргумент
   // присваиваю переменной number2 = 0
    var number2 = 0
    // цикл в котором делаю перебор от 0 до входяшего числа в функции
    for i in 0..<number1 {
        // условие в теле цикла , где i(константу) делю на 2 неравное 0
       if i % 2 != 0 {
            // нахожу сумму того что нашли выше
           number2 += i
       }
   }
    // возвращаю number2
    return number2
}
array(number1: 10)


// 3 поток


// Задача 1 - Функция принимает на вход 2 катета прямоугольного треугольника. Вернуть в tuple ( кортеж ) длину гипотенузы и площадь
import UIKit
import Foundation

func cathet(number1: Double , number2: Double) -> (Double , Double) { // функция которая принимает два аргумента Дабл, и возвращает кортеж из двух катетов.
   // переменная turple в которой я объявляю кортеж с типами знвчений
    var turple: (hipo1: Double , square: Double)
    // в 0 значении кортежа вычисляю гипотенузу
    turple.hipo1 = sqrt(number1 * number1 + number2 * number2)
    // нахожу через значение кортежа площадь
    turple.square = (number1 * number2) / 2
    return turple
}
cathet(number1: 3, number2: 4)

// Задача 2 - Функция принимает на вход целое число. Если оно двузначное - вернуть массив всех нечетных чисел, не больше этого числа кроме 12,23 и 91. Если оно однозначное - вернуть массив всех целых чисел, не больше этого числа.
import Foundation

    func numbers(arg: Int) -> [Int] { // функция в которой присвоили целочисленный аргумент в котором возвращаем массив целых чисел
   // переменная array ,в которой возвращаю пустой массив
    var array = [Int]()
        // переменная variable в которой присваиваю 1
    var variable: Int = 1
        // условие для двузначного, если aргумент больше либо равен 10 и аргумент меньше 100
        if arg >= 10 && arg < 100 {
            // приисваиваем переменной значение 11
        variable = 11
            // цикл , где variable меньше аргумента
            while variable < arg {
                // условие если variable меньше либо равно 23 и меньше либо равен 91
                if variable != 23 && variable != 91 {
                    // применяем свойство к array в котором вставляем variable
                    array.append(variable)
                }
                // далее к переменной присваиваем + 2
                variable = variable + 2
            }
            // иначе если аргумент меньше либо равен 9
        } else if arg <= 9 {
            // то переменной присваиваем значение 1
            variable = 1
            // далее цикл где variable меньше аргумента
            while variable < arg {
                //применяем свойство к array в котором вставляем variable
                array.append(variable)
                //далее к переменной присваиваем + 1
                variable = variable + 1
            }
        }
        // возвращаем массив
        return array
}

print(numbers(arg: 78))

// Задача 3 - Функция принимает на вход неотсортированный массив целых чисел. Вернуть минимальное и максимальное число в tuple.
func staff(x: [Int]) -> (Int , Int ) { // функция в которой массив целых чисел возвращает кортеж целых чисел
 var minmax = (x[0].x[0]) // переменная = х где 0 индекс и х 0 индекс
 // цикл диапазон от i до x
 for i in x{
    // если переменная с индексом 0 больше i
    if minmax.0 > i {
    // то от переменной с индексом 0 отнимаем 1
        minmax.0 - 1
    }
    // иначе если переменная с индексом 1 меньше i
    else if minmax.1 < i {
    // из переменной с индексом 1 отнимаем i
        minmax.1 - i
    }
 }
 // возвращаем переменную
 return minmax
}


// Задача 4 - Функция принимает на вход массив целых чисел. Напечатать все числа, находящиеся на нечетных позициях.
func array(number: [Int]) -> Void { // функция с целым числом не возвращает ничего
    // переменная которой присвоили пустой массив
    var array1 = [Int]()
    // где диапазон от i до аргумента
    for i in number {
    // условие где i делим на 2 не равному 0
        if i % 2 != 0 {
        }
        // переменной array прибавляем 2
        array1 = array1 + 2
    }
}


// Задача 5 - Написать функцию, принимающую на вход 2 целых числа. Вернуть факториал первого аргумента, если значение факториала меньше или равно второму аргументу. Иначе вернуть второй аргумент
func numbers(number1: Int , number2: Int) -> Int { // функция вход два целых числа возвращает целое число
    // переменная факториал = 1
    var factorial = 1
   // цикл где диапазон от 1 до аргумента 1
    for i in 1...number1 {
    // переменную факториал умножаем = 1
        factorial *= i
    }
    // если факторил меньше или раньше второму аргументу
    if factorial <= number2 {
    // то ретерним факториал
        return factorial
        // иначе
    } else {
    // ретерним аргумент2
        return number2
    }
}

// Задача 6 -Написать функцию, печатающую входной массив в обратном порядке (reversed())
func numbers(number: [Int]) -> [Int] { //  Функция в которой массив целых чисел возвращает массив
    // возвращаем массив через свойство в обратном порядке
    return number.reversed()

}
numbers(number: [1,2,4,5])

// Задача 7 - На вход функции 2 массива целых чисел. Первый - исследуемый, второй - фильтрующий. Вернуть из функции массив чисел, не входящих в исследуемый массив.  ( у массива есть функция contains() - вызывается так же, как append() )
func exit(research: [Int], filter: [Int] ) -> [Int] { // Функция exit в которой два массива исследуемый и фильтрующий и возвращаем массив
    // переменная exitarray присваиваем пустой массив
    var exitarray = [Int]()
    // делаем цикл для элемента до фильтрующий массива
    for i in filter {
        // если в исследуемом массиве не содержится элемент фильтрующего
        if !research.contains(i){
            // то в пустой массив добавляем элемент фильтрующего
            exitarray.append(i)
        }
    }
    // возвращаем отфильтрованный массив
    return exitarray
}

// Задача 8 - То же, но вернуть массив чисел, не входящих в фильтрующий массив
func exit2(research: [Int], filter: [Int] ) -> [Int] { // Функция exit в которой два массива исследуемый и фильтрующий и возвращаем массив
// переменная exitarray присваиваем пустой массив
var exitarray = [Int]()
// делаем цикл для элемента до исследуемого массива
for i in research {
    // если в фильтрующем массиве не содержится элемент фильтрующего
    if !filter.contains(i){
        // то в пустой массив добавляем элемент фильтрующего
        exitarray.append(i)
    }
}
// возвращаем отфильтрованный массив
return exitarray
}

// Задача 9 - Написать функцию-оболочку функций из 7 и 8 задачи. Она принимает на вход 2 массива (исследуемый и фильтрующий) и третий аргумент - строка String, задающий режим работы.
//Если режим работы - “new” - вызываем функцию из п.7 и возвращаем массив.
//Если режим работы - “outdated” - вызываем функцию

func array(research1: [Int] , filter1:[Int] , string: String ) -> Void  { // функция в которой три аргумента 2 целочисленных , один строковый не возврвщает ничего
   // если строке присвоим new
   if string == "new" {
   // вызываем функция из 7 задачи
        exit(research: research1, filter: filter1)
        // иначе если строка outdated
    } else if string == "outdated" {
    // вызываем функцию из задачи 8
        exit2(research: research1, filter: filter1)
    }
}

// Задача 10 - Числа Фибоначчи . Первое - 0, второе - 1. Третье - 0+1 = 1 Четвертое - 0 +1 + 1 = 2 Пятое - 0 + 1 + 1 + 2 = 4 и т д.
//Написать функцию, принимающую на вход N - целое число, номер числа фибоначчи. Вернуть из функции найденное число. ( используйте цикл от 0...N ).
//СЛОЖНА - подумайте и погуглите рекурсивную реализацию.\
import UIKit
func fibonachi(N: Int) -> Int { // функция в которой целое число возвращает целые числа
    // если аргумент меньше 1
    if N < 1 {
        // возвращаем 0
    return 0
    }
    // если N равно 1 или N равно 2
    if N == 1 || N == 2 {
        // то возвращаем 1
        return 1
    }
    // возвращаем сумму двух предыдущих элементов последовательности
    return fibonachi(N:N-1) + fibonachi(N:N-2)
}
fibonachi(N:7)
    

// 4 поток 


// 1 задача - На вход функции массив целых чисел. Напечатать количество чётных, нечётных, двузначных и однозначных чисел

func arrays(numbers: [Int]) -> [Int] {
    var odd = 0
    var unambiguous = 0
    var digit = 0

    for i in 0..<numbers.count {
        var size = numbers[i]
        if size % 2 != 0 {
            odd += 1
        }
        if array < 10 {
            unambiguous += 1
        } else if array < 100 {
            digit += 1
        }
       print("\(size - odd ) even numbers")
    }
}

// 2 задача - На вход функции массив чисел. Верните этот же массив, но с увеличенными на 10% элементами
func arrayNumbers(array: [Float]) -> [Float] {
    return array.map {
        $0 * 1.1
   }
}
