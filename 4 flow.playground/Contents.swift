// Задача 1 - Функция принимает на вход 2 катета прямоугольного треугольника. Вернуть в tuple ( кортеж ) длину гипотенузы и площадь
import UIKit
import Foundation

func cathet(number1: Double , number2: Double) -> (Double , Double) { // функция которая принимает два катета, и возвращает кортеж из гипотенузы и площади.
   // переменная turple в которой я объявляю кортеж с типами значений дабл
    var turple: (hipo1: Double , square: Double)
    // в 0 значении кортежа вычисляю гипотенузу
    turple.hipo1 = sqrt(number1 * number1 + number2 * number2)
    // нахожу через катеты площадь
    turple.square = (number1 * number2) / 2
    return turple
}
cathet(number1: 3, number2: 4)

// Задача 2 - Функция принимает на вход целое число. Если оноЙ двузначное - вернуть массив всех нечетных чисел, не больше этого числа кроме 12,23 и 91. Если оно однозначное - вернуть массив всех целых чисел, не больше этого числа.
import Foundation

    func numbers(arg: Int) -> [Int] { // функция которая принимает целочисленный аргумент и возвращает массив целых чисел
   // создаю пустой массив целых чисел
    var array = [Int]()
        // переменная variable присваиваю значение 1
    var variable: Int = 1
        // условие для двузначного, если aргумент больше либо равен 10 и аргумент меньше 100
        if arg >= 10 && arg < 100 {
            // приисваиваем переменной значение 11
        variable = 11
            // цикл , пока variable меньше аргумента
            while variable < arg {
                // условие если variable не равно 23 и 91
                if variable != 23 && variable != 91 {
                    // применяем свойство к array в котором вставляем variable
                    array.append(variable)
                }
                // далее к переменной добавляем 2
                variable = variable + 2
            }
            // иначе если аргумент меньше либо равен 9
        } else if arg <= 9 {
            // то переменной присваиваем значение 1
            variable = 1
            // далее цикл пока variable меньше аргумента
            while variable < arg {
                //применяем свойство к array в котором вставляем variable
                array.append(variable)
                //далее к переменной добавляем 1
                variable = variable + 1
            }
        }
        // возвращаем массив
        return array
}

print(numbers(arg: 78))

// Задача 3 - Простое число - число, которое делится без остатка на само себя и на 1. Напишите функцию, принимающую на вход целое число и определяющее, простое оно или нет.  ( 7 - простое, 9 - не простое )
import UIKit
func twointegers(one: Int) -> Bool { // функция в которой аргумент целое число возвращает бул
   // если аргумент равен 2
    if one == 2 {
        // возвращает истину
        return true
    }
    // если аргумент меньше двух или четное
    if one < 2 || one % 2 == 0 {
        // возвращаем ложь
        return false
    }
    // переменная f = 3
    var f = 3
    // цикл пока f меньше аргумента
    while f < one {
        // если аргумент делится без остатка на 3
        if one % f == 0 {
            // возвращаем ложь
            return false
        }
        // прибавляем переменной 2
        f += 2
    }
    // возвращаем истину
    return true
}
twointegers(one: 197)


// Задача 4 - Напишите функцию, принимающую на вход массив целых чисел. Используя функцию из п.3 верните массив простых чисел из массива. Оценить сложность поиска простых чисел в массиве таким способом
func array(one:[Int]) -> [Int] { // функция которая принимает на вход массив и возвращает массив
    // создаем новый массив
    var arraynew: [Int] = []
    // цикл в диапазоне от i до до аргумента по всем элемента массива
    for i in one {
        // если функция из п.3 для i принимает значение истинна
        if twointegers(one: i) {
            // добавляем в новый массив i
            arraynew.append(i)
        }
    }
    // возвращаем новый массив
    return arraynew
}

// Задача 5 - То же, но верните массив не простых чисел.
func array2(one:[Int]) -> [Int] { // Функция в которой массив целых чисел и возвращает массив целых чисел
    // создаем новый пустой массив
    var arraynew: [Int] = []
    // цикл в диапазоне от i до one
    for i in one {
        // если функция из п.3 для i принимает значения ложь
        if !twointegers(one: i) {
            // в массив добавляем i
            arraynew.append(i)
        }
    }
    // возвращаем arraynew
    return arraynew
}
    
// Задача 6 - Напишите функцию, возвращающую среднее арифметическое элементов массива
import UIKit
func arifmetic(one: [Int]) -> Double { // функция принимает массив целых чисел и возвращает вещественный тип дабл
    var oneInteger = 0 // сумма ( переменнной присвоили 0)
    // цикл для i проходящийся по всем жлементам массива one
    for i in one {
        //в сумму добавить значение текущего элемента
        oneInteger += i
    }
    //вернуть сумму деленную на количество элементов массива типа дабл
    return Double (oneInteger / one.count)
}
arifmetic(one: [5,5])


// Задача 7 - На вход функции 2 массива. Первый - имена [“Петя”, “Гриша”, “Никола”]. Второй - соответствующие времена пробежки дистанции. [10, 6, 25] (Петя - за 10 минут, Гриша - 6 минут, Никола - 25 минут) . Написать функцию, возвращающую самого медленного и самого быстрого.
//функция принимает на вход массив строк и массив целых чисел, возвращает массив строк
func minmax(_ names: [String],_ time: [Int]) -> [String] {
    //создаем новый пустой массив строк
    var array: [String] = []
    //создаем пустые переменные минимума и максимума - здесь хранятся индексы массивов
    var min = 0
    var max = 1
    //цикл для каждого индекса массива time
    for i in 0...time.count-1 {
        //если элемент массива time с текущим индексом i меньше элемента time с индексом min
        if time[i] < time[min] {
            //min присваиваем текущий индекс
            min = i
        }
        //если элемент массива time с текущим индексом i больше элемента time с индексом max
        if time[i] > time[max] {
            //max присваиваем текущий индекс
            max = i
        }
    }
    //в новый массив добавляем элемент из names с индексом min
    array.append(names[min])
    //в новый массив добавляем элемент из names с индексом max
    array.append(names[max])
    //вернуть новый массив
    return array
}
print(minmax(["1", "min", "3", "4", "5", "max", "7"],[4, 1, 7, 4, 16, 21, 8]))

// Задача 8 - На вход функции 2 аргумента - искомое число и массив целых чисел. Вернуть true, если искомое число находится на первом или на последнем месте в массиве
func isc(one: Int , two: [Int]) -> Bool { // функция в которой аргумент целое число и массив целых чисел возвращает логическое Bool
    // если аргумент one равен первому элементу two или аргумент one равен последнему элементу в массиве two
    if one == two[0] || one == two.last {
        // ретерним тру(истинну)
        return true
    }
    // иначе возвращаем ложь
    return false
}
isc(one: 2, two: [1,2,3,5])

// 9 задача - На вход функции массив целых чисел. Вернуть true, если массив длины 1 или у него равны последний и первый элементы
func privat(one: [Int]) -> Bool { // функция в которой массив целых чисел возвращает логическое bool
    // если количество элементов в массиве равно 1 или 0 индекс аргумента one равен последнему элементу в массиве
    if one.count == 1 || one[0] == one.last {
        // то возвращаем истинну
        return true
    }
    // иначе ретерним фолс
    return false
}
privat(one: [2,3,6,9,2])


// Задача 10 - На вход функции 2 массива целых чисел. Вернуть true, если у них одинаковые последние ИЛИ первые элементы. Длина массивов произвольная и не обязательно одинаковая
func arrays(one:[Int] , two:[Int]) -> Bool { // функция принимает два массива целых чисел и возврвщает bool
    // если последние элементы или первые элементы массивов равны
    if one.last == two.last || one[0] == two[0] {
        // возвращаем true
        return true
    }
    // возвращаем false
    return false
}
arrays(one: [1,2,3], two: [1,2,3]) // проверка

// Задача 11 - СЛОЖНА На вход функции - массив целых чисел. Вернуть его циклически сдвинутую копию на 1 элемент влево. Пример: [1,2,3,4,5] -> [5,1,2,3,4]
func integers(one: [Int]) -> [Int] { // функция в которой массив целых чисел возвращает массив целых чисел
    // переменная two в которой присваиваем пустой массив
    var two: [Int] = []
    // переменной two(пустому массиву) вставляем последний элемент первого массива
    two.append(one.last!)
    // далее вставляем пустому массиву
    two.append(contentsOf: one)
    // из пустого массива удаляем последний элемент
    two.removeLast()
    // возвращаем массив
    return two
}
integers(one: [1,2,3,4,5])
// Задача 12 - ОЧЕНЬ СЛОЖНА Усложнить функцию из п.11 - добавить в функцию еще аргумент - показывающий, на сколько элементов циклически надо сдвинуть элементы массива.
func integersHard(one: [Int] , N: Int) -> [Int] { // фукнция принимает массив целых чисел и число и возвращает массив целых чисел
    // переменной two присваиваем массив one
    var two: [Int] = one
    // цикл для i в диапазоне от 1 до второго аргумента функции
    for i in 1...N {
        // применяем функцию из п.11 к массиву two
       two = integers(one: two)
    }
    // возвращаем то что получилось
  return two
}
integersHard(one: [1,2,3,4,5], N: 3)
// 13 задача - Средняя скорость транспорта - Y km/h Расход топлива - M литров на 100км. Написать функцию, рассчитывающую расход топлива за Т часов работы. Как водится - Y, M, T - аргументы функции
func midleSpeed(y: Int , m: Int) -> Double { // функция принимает два целых числа и возвращает дабл
    // скорость умножаем на расход топлива и делим на 100, конвертируем в дабл
   return Double ( y * m / 100)
}
midleSpeed(y: 180, m: 5)

// 14 задача - На вход функции массив целых чисел.
//Вернуть целое число - разницу между максимальным и минимальным элементом массива
func staff(x: [Int]) -> Int { // функция в которой массив целых чисел возвращает целое число
    var minmax = (x[0],x[0]) // кортеж со значениями первого элемента массива х 
 // цикл диапазон для i по элементам массива
 for i in x{
    // если переменная с индексом 0 больше i
    if minmax.0 > i {
    // переменную с индексом 0 приравниваем к i
        minmax.0 = i
    }
    // иначе если переменная с индексом 1 меньше i
    else if minmax.1 < i {
    // переменyю с индексом 1 приравниваем к i
        minmax.1 = i
    }
 }
 // возвращаем разницу между максимальным и минимальным элементом
    return minmax.1 - minmax.0
}
staff(x: [1,2,5,7]) // проверка



// leetCode
// example 1,2,3

func sumArray(array: [Int]) -> [Int]{ // функция принимает массив целых чисел и возвращает массив целых чисел
    // переменной emptyArray присваиваем значения массива array
    var emptyArray = array
    // цикл для значения i в диапазоне индексов массива начиная с 1
    for i in 1..<array.count {
        // к текущему элементу массива добавляем предыдущий
        emptyArray[i] += emptyArray[i - 1]
    }
    // возвращаем emptyArray
    return emptyArray
}
sumArray(array: [3,1,2,10,1]) // проверка


// second decision
import UIKit
func runningSum(_ nums: [Int]) -> [Int] { // функция принимает массив целых чисел и возвращает массив целых чисел
    // создаем пустой массив
    var output: [Int] = []
    // цикл для значения i в диапазоне индексов массива
    for i in 0..<nums.count {
        // переменная равна 0
        var sum = 0
        // цикл для значения j в диапазоне от 0 до i
        for j in 0...i {
            // сумма = сумма + значение массива индекса j
            sum = sum + nums[j]
        }
        // в пустой массив добавляем сумму
        output.append(sum)
    }
    // ретерним аутпут
    return output
}
print(runningSum([1,2,3,4]))




